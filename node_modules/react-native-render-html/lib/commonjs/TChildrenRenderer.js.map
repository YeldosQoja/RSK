{"version":3,"sources":["TChildrenRenderer.tsx"],"names":["isCollapsible","tnode","type","TChildrenRenderer","tchildren","propsForChildren","disableMarginCollapsing","renderChild","collapsedMarginTop","elements","map","childTnode","i","propsFromParent","childElement","React","createElement","TNodeRenderer","key","index","tchildrenRendererDefaultProps","defaultProps"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;;;AAEA,SAASA,aAAT,CAAuBC,KAAvB,EAAqC;AACnC,SAAOA,KAAK,CAACC,IAAN,KAAe,OAAf,IAA0BD,KAAK,CAACC,IAAN,KAAe,UAAhD;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASC,iBAAT,CAA2B;AACzBC,EAAAA,SADyB;AAEzBC,EAAAA,gBAFyB;AAGzBC,EAAAA,uBAHyB;AAIzBC,EAAAA;AAJyB,CAA3B,EAKyC;AACvC,MAAIC,kBAAiC,GAAG,IAAxC;AACA,QAAMC,QAAQ,GAAGL,SAAS,CAACM,GAAV,CAAc,CAACC,UAAD,EAAaC,CAAb,KAAmB;AAChD,QACE,CAACN,uBAAD,IACAN,aAAa,CAACW,UAAD,CADb,IAEAC,CAAC,GAAG,CAFJ,IAGAZ,aAAa,CAACI,SAAS,CAACQ,CAAC,GAAG,CAAL,CAAV,CAJf,EAKE;AACAJ,MAAAA,kBAAkB,GAAG,oCAAsBJ,SAAS,CAACQ,CAAC,GAAG,CAAL,CAA/B,EAAwCD,UAAxC,CAArB;AACD;;AACD,UAAME,eAAe,GAAG,EAAE,GAAGR,gBAAL;AAAuBG,MAAAA;AAAvB,KAAxB;;AACA,UAAMM,YAAY,gBAAGC,eAAMC,aAAN,CAAoBC,sBAApB,EAAmC;AACtDJ,MAAAA,eADsD;AAEtDZ,MAAAA,KAAK,EAAEU,UAF+C;AAGtDO,MAAAA,GAAG,EAAEN;AAHiD,KAAnC,CAArB;;AAKA,WAAO,OAAOL,WAAP,KAAuB,UAAvB,GACHA,WAAW,CAAC;AACVW,MAAAA,GAAG,EAAEN,CADK;AAEVE,MAAAA,YAFU;AAGVK,MAAAA,KAAK,EAAEP,CAHG;AAIVD,MAAAA,UAJU;AAKVE,MAAAA;AALU,KAAD,CADR,GAQHC,YARJ;AASD,GAxBgB,CAAjB;AAyBA,sBAAO,4DAAGL,QAAH,CAAP;AACD;;AAEM,MAAMW,6BAGZ,GAAG;AACFf,EAAAA,gBAAgB,EAAE;AADhB,CAHG;AAOP;AACA;AACA;;;AACAF,iBAAiB,CAACkB,YAAlB,GAAiCD,6BAAjC;eAEejB,iB","sourcesContent":["import React, { ReactElement } from 'react';\nimport { TNode } from '@native-html/transient-render-engine';\nimport TNodeRenderer from './TNodeRenderer';\nimport { TChildrenRendererProps } from './shared-types';\nimport getCollapsedMarginTop from './helpers/getCollapsedMarginTop';\n\nfunction isCollapsible(tnode: TNode) {\n  return tnode.type === 'block' || tnode.type === 'phrasing';\n}\n\n/**\n * A component to render collections of tnodes.\n * Especially useful when used with {@link useTNodeChildrenProps}.\n */\nfunction TChildrenRenderer({\n  tchildren,\n  propsForChildren,\n  disableMarginCollapsing,\n  renderChild\n}: TChildrenRendererProps): ReactElement {\n  let collapsedMarginTop: number | null = null;\n  const elements = tchildren.map((childTnode, i) => {\n    if (\n      !disableMarginCollapsing &&\n      isCollapsible(childTnode) &&\n      i > 0 &&\n      isCollapsible(tchildren[i - 1])\n    ) {\n      collapsedMarginTop = getCollapsedMarginTop(tchildren[i - 1], childTnode);\n    }\n    const propsFromParent = { ...propsForChildren, collapsedMarginTop };\n    const childElement = React.createElement(TNodeRenderer, {\n      propsFromParent,\n      tnode: childTnode,\n      key: i\n    });\n    return typeof renderChild === 'function'\n      ? renderChild({\n          key: i,\n          childElement,\n          index: i,\n          childTnode,\n          propsFromParent\n        })\n      : childElement;\n  });\n  return <>{elements}</>;\n}\n\nexport const tchildrenRendererDefaultProps: Pick<\n  TChildrenRendererProps,\n  'propsForChildren'\n> = {\n  propsForChildren: {}\n};\n\n/**\n * @ignore\n */\nTChildrenRenderer.defaultProps = tchildrenRendererDefaultProps;\n\nexport default TChildrenRenderer;\n"]}