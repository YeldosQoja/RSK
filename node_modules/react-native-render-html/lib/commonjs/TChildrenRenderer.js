"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.tchildrenRendererDefaultProps = void 0;

var _react = _interopRequireDefault(require("react"));

var _TNodeRenderer = _interopRequireDefault(require("./TNodeRenderer"));

var _getCollapsedMarginTop = _interopRequireDefault(require("./helpers/getCollapsedMarginTop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isCollapsible(tnode) {
  return tnode.type === 'block' || tnode.type === 'phrasing';
}
/**
 * A component to render collections of tnodes.
 * Especially useful when used with {@link useTNodeChildrenProps}.
 */


function TChildrenRenderer({
  tchildren,
  propsForChildren,
  disableMarginCollapsing,
  renderChild
}) {
  let collapsedMarginTop = null;
  const elements = tchildren.map((childTnode, i) => {
    if (!disableMarginCollapsing && isCollapsible(childTnode) && i > 0 && isCollapsible(tchildren[i - 1])) {
      collapsedMarginTop = (0, _getCollapsedMarginTop.default)(tchildren[i - 1], childTnode);
    }

    const propsFromParent = { ...propsForChildren,
      collapsedMarginTop
    };

    const childElement = /*#__PURE__*/_react.default.createElement(_TNodeRenderer.default, {
      propsFromParent,
      tnode: childTnode,
      key: i
    });

    return typeof renderChild === 'function' ? renderChild({
      key: i,
      childElement,
      index: i,
      childTnode,
      propsFromParent
    }) : childElement;
  });
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, elements);
}

const tchildrenRendererDefaultProps = {
  propsForChildren: {}
};
/**
 * @ignore
 */

exports.tchildrenRendererDefaultProps = tchildrenRendererDefaultProps;
TChildrenRenderer.defaultProps = tchildrenRendererDefaultProps;
var _default = TChildrenRenderer;
exports.default = _default;
//# sourceMappingURL=TChildrenRenderer.js.map