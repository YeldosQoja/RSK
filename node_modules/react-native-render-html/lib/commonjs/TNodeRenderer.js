"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _TBlockRenderer = _interopRequireDefault(require("./TBlockRenderer"));

var _TPhrasingRenderer = _interopRequireDefault(require("./TPhrasingRenderer"));

var _TTextRenderer = _interopRequireDefault(require("./TTextRenderer"));

var _SharedPropsProvider = require("./context/SharedPropsProvider");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function TNodeRenderer(props) {
  const {
    tnode
  } = props;
  const sharedProps = (0, _SharedPropsProvider.useSharedProps)();
  const tnodeProps = { ...props,
    sharedProps
  };

  if (tnode.type === 'block' || tnode.type === 'document') {
    return /*#__PURE__*/_react.default.createElement(_TBlockRenderer.default, tnodeProps);
  }

  if (tnode.type === 'phrasing') {
    return /*#__PURE__*/_react.default.createElement(_TPhrasingRenderer.default, tnodeProps);
  }

  if (tnode.type === 'text') {
    return /*#__PURE__*/_react.default.createElement(_TTextRenderer.default, tnodeProps);
  }

  if (tnode.type === 'empty' && __DEV__) {
    if (tnode.isUnregistered) {
      console.warn(`There is no custom renderer registered for tag "${tnode.tagName}" which is not part of the HTML5 standard. The tag will not be rendered.` + ' If you don\'t want this tag to be rendered, add it to "ignoredTags" prop array. If you do, register a custom renderer for this tag.');
    } else if (tnode.tagName !== 'head') {
      console.warn(`The "${tnode.tagName}" tag is a valid HTML element but is not handled by this library. You must register a custom renderer or plugin and make sure its content model is not set to "none".` + ' If you don\'t want this tag to be rendered, add it to "ignoredTags" prop array.');
    }
  }

  return null;
}

const defaultProps = {
  propsFromParent: {
    collapsedMarginTop: null
  }
};
/**
 * @ignore
 */

TNodeRenderer.defaultProps = defaultProps;
var _default = TNodeRenderer;
exports.default = _default;
//# sourceMappingURL=TNodeRenderer.js.map