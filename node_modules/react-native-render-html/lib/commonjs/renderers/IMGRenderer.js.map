{"version":3,"sources":["IMGRenderer.tsx"],"names":["useIMGElementProps","props","style","tnode","onPress","key","contentWidth","initialDimensions","enableExperimentalPercentWidth","computeImagesMaxWidth","src","attributes","computeMaxWidth","alt","testID","altColor","styles","nativeTextFlow","color","source","uri","width","height","objectFit","webBlockRet","IMGRenderer","React","createElement","IMGElement"],"mappings":";;;;;;;;AAAA;;AAEA;;AAEA;;AAGA;;AACA;;AACA;;;;AAEA;AACA;AACA;AACA;AACO,SAASA,kBAAT,CACLC,KADK,EAEY;AACjB,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,OAAhB;AAAyBC,IAAAA;AAAzB,MAAiCJ,KAAvC;AACA,QAAMK,YAAY,GAAG,+BAArB;AACA,QAAM;AACJC,IAAAA,iBADI;AAEJC,IAAAA;AAFI,MAGF,8CAAiB,KAAjB,CAHJ;AAIA,QAAMC,qBAAqB,GAAG,mDAAyB,KAAzB,CAA9B;AACA,QAAMC,GAAG,GAAGP,KAAK,CAACQ,UAAN,CAAiBD,GAAjB,IAAwB,EAApC;AACA,SAAO;AACL;AACAL,IAAAA,GAFK;AAGLC,IAAAA,YAHK;AAILM,IAAAA,eAAe,EAAEH,qBAJZ;AAKLD,IAAAA,8BALK;AAMLD,IAAAA,iBANK;AAOLH,IAAAA,OAPK;AAQLS,IAAAA,GAAG,EAAEV,KAAK,CAACQ,UAAN,CAAiBE,GARjB;AASLC,IAAAA,MAAM,EAAE,KATH;AAULC,IAAAA,QAAQ,EAAEZ,KAAK,CAACa,MAAN,CAAaC,cAAb,CAA4BC,KAVjC;AAWLC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,GAAG,EAAE,+BAAiBV,GAAjB;AAAP,KAXH;AAYLR,IAAAA,KAAK,EAAEA,KAZF;AAaLmB,IAAAA,KAAK,EAAElB,KAAK,CAACQ,UAAN,CAAiBU,KAbnB;AAcLC,IAAAA,MAAM,EAAEnB,KAAK,CAACQ,UAAN,CAAiBW,MAdpB;AAeLC,IAAAA,SAAS,EAAEpB,KAAK,CAACa,MAAN,CAAaQ,WAAb,CAAyBD;AAf/B,GAAP;AAiBD;;AAED,MAAME,WAAkC,GAAIxB,KAAD,IAAW;AACpD,sBAAOyB,eAAMC,aAAN,CAAoBC,mBAApB,EAAgC5B,kBAAkB,CAACC,KAAD,CAAlD,CAAP;AACD,CAFD;;eAIewB,W","sourcesContent":["import React from 'react';\nimport { TBlock } from '@native-html/transient-render-engine';\nimport IMGElement, { IMGElementProps } from '../elements/IMGElement';\nimport { InternalBlockRenderer } from '../render/render-types';\nimport { useComputeMaxWidthForTag } from '../context/SharedPropsProvider';\nimport { ImageStyle } from 'react-native';\nimport { InternalRendererProps } from '../shared-types';\nimport useNormalizedUrl from '../hooks/useNormalizedUrl';\nimport { useRendererProps } from '../context/RenderersPropsProvider';\nimport useContentWidth from '../hooks/useContentWidth';\n\n/**\n * A hook to produce props consumable by {@link IMGElement} component\n * from custom renderer props.\n */\nexport function useIMGElementProps(\n  props: InternalRendererProps<TBlock>\n): IMGElementProps {\n  const { style, tnode, onPress, key } = props;\n  const contentWidth = useContentWidth();\n  const {\n    initialDimensions,\n    enableExperimentalPercentWidth\n  } = useRendererProps('img');\n  const computeImagesMaxWidth = useComputeMaxWidthForTag('img');\n  const src = tnode.attributes.src || '';\n  return {\n    //@ts-ignore\n    key,\n    contentWidth,\n    computeMaxWidth: computeImagesMaxWidth,\n    enableExperimentalPercentWidth,\n    initialDimensions,\n    onPress,\n    alt: tnode.attributes.alt,\n    testID: 'img',\n    altColor: tnode.styles.nativeTextFlow.color as string,\n    source: { uri: useNormalizedUrl(src) },\n    style: style as ImageStyle,\n    width: tnode.attributes.width,\n    height: tnode.attributes.height,\n    objectFit: tnode.styles.webBlockRet.objectFit\n  };\n}\n\nconst IMGRenderer: InternalBlockRenderer = (props) => {\n  return React.createElement(IMGElement, useIMGElementProps(props));\n};\n\nexport default IMGRenderer;\n"]}